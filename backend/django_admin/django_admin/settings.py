"""
Django settings for django_admin project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import dj_database_url


#django will load .env file at the beginning 
from dotenv import load_dotenv
load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv("SECRET_KEY", "your-secret-key")
DEBUG = os.getenv("DEBUG", "False") == "True"
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",")
if not ALLOWED_HOSTS:
    ALLOWED_HOSTS = [] # Ensure it's an empty list if split results in an empty string from empty env var


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SECRET_KEY




# Application definition

INSTALLED_APPS = [
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
        "django.contrib.sites",
    "rest_framework",
    "rest_framework.authtoken",
    'django_celery_results',  # Celery Results Storage
    'django_celery_beat',  # Celery Periodic Tasks
    'homepage',  # Homepage App
    'country',  # Country-Specific App Page
    'personalized_list',  # Personalized App List Page
    'itinerary', #itinerary app for dynamic leg suggestion
    'django_admin',
    'rest_framework_simplejwt',
    'auth_app',  # authentication app
    
    # allauth + dj-rest-auth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",
    "dj_rest_auth",
    
    
    'corsheaders',
    
]


SITE_ID = 2

REST_USE_JWT = True        
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGIN_METHODS = {'username', 'email'}
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = True
# ACCOUNT_UNIQUE_USERNAME = True


# dj-rest-auth will use ALLAUTH settings for password reset e-mails, etc.
# configure your email backend, e.g. console for dev:
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"




REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',  # Allow everyone by default
    ),
}


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]

# CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins (for development)
CORS_ALLOW_CREDENTIALS = True  # Allow cookies/auth headers

if DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",  # Allow local frontend
        "http://127.0.0.1:3000",
    ]
else:
    # Read your single comma-separated env var...
    cors_env = os.getenv("CORS_ALLOWED_FRONTENDS", "")
    # Split on commas, strip whitespace, drop any empty strings:
    CORS_ALLOWED_ORIGINS = [
        origin.strip()
        for origin in cors_env.split(",")
        if origin.strip()
    ]

ROOT_URLCONF = 'django_admin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'personalized_list' /'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_admin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.getenv("DB_NAME"),
#         'USER': os.getenv("DB_USER",),
#         'PASSWORD': os.getenv("DB_PASSWORD",),
#         'HOST': os.getenv("DB_HOST", ),
#         'PORT': os.getenv("DB_PORT", ),
        
#     },
 
# }

DATABASES = {
    'default': dj_database_url.parse(
        os.getenv("DATABASE_URL"),
        conn_max_age=600, # Optional: Reconnects to the database every 10 minutes to prevent stale connections
        ssl_require=True        # enforce SSL (Aiven requires it)
    )
}

# # Redis Configuration
# REDIS_HOST = os.getenv("REDIS_HOST")
# REDIS_PORT = os.getenv("REDIS_PORT")
# REDIS_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/0"

# # This avoids conflicts with Algolia caching, ensuring the two functionalities do not overwrite each other.
# REDIS_DB_PERSONAL_LISTS = 1  # Separate from Algolia caching


#### Redis Configuration via single URL ####
# e.g. REDIS_URL=redis://:password@hostname:6379/0
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

# If you want to isolate your “personal list” DB, you can supply REDIS_URL_PER_LISTS
# e.g. redis://:password@hostname:6379/1
REDIS_URL_PERSONAL_LISTS = os.getenv("REDIS_URL_PER_LISTS") or REDIS_URL

REDIS_URL_ONE=os.getenv("REDIS_URL_ONE", "redis://localhost:6379/2")

CACHES = {
  "default": {
    "BACKEND": "django_redis.cache.RedisCache",
    "LOCATION": REDIS_URL_ONE,
    "OPTIONS": {
      "CLIENT_CLASS": "django_redis.client.DefaultClient",
    }
  }
}


# Celery Configuration
CELERY_BROKER_URL = os.getenv("REDIS_URL")
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = 'django-db'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


FRONTEND_URL = os.getenv("FRONTEND_URL")  # Default fallback
BACKEND_URL= os.getenv("BACKEND_URL")

# JWT Configuration
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': 'SECRET_KEY',  # Replace with a secure key (use ENV variables)
    'AUTH_HEADER_TYPES': ('Bearer',),
}


SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True


STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATICFILES_DIRS = [
    BASE_DIR /  "static",
]

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]


from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
}